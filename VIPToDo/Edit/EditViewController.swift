//
//  EditViewController.swift
//  VIPToDo
//
//  Created by Seokho on 2020/09/08.
//  Copyright (c) 2020 Seokho. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditDisplayLogic: class {
	func displayTitle(viewModel: Edit.GetTitle.ViewModel)
}

class EditViewController: BaseViewController {
	
	var interactor: EditBusinessLogic?
	var router: (NSObjectProtocol & EditRoutingLogic & EditDataPassing)?
	
	var defaultText: String?
	
	let doneButtonItem = UIBarButtonItem(barButtonSystemItem: .done, target: nil, action: nil)
	
	lazy var titleInput: UITextField = {
		let textField = UITextField()
		textField.autocorrectionType = .no
		textField.borderStyle = .roundedRect
		textField.font = .systemFont(ofSize: 16)
		textField.placeholder = "Anythine Input..."
		textField.textColor = .label
		textField.layer.borderColor = UIColor.black.cgColor
		textField.translatesAutoresizingMaskIntoConstraints = false
		textField.text = self.defaultText
		return textField
	}()
	
	override init() {
		super.init()
		self.navigationItem.rightBarButtonItem = self.doneButtonItem
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		fatalError()
	}
	
	override func viewDidLoad() {
		super.viewDidLoad()
		self.interactor?.showTitle()
	}
	
	override func configureUI() {
		super.configureUI()
		
		self.view.addSubview(titleInput)
	}
	
	override func setupConstraints() {
		super.setupConstraints()
		
		NSLayoutConstraint.activate([
			titleInput.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor, constant: 16),
			titleInput.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor, constant: 16),
			titleInput.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor, constant: -16),
		])
	}
	
	// MARK: Setup
	private func setup() {
		let viewController = self
		let interactor = EditInteractor()
		let presenter = EditPresenter()
		let router = EditRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	
}
extension EditViewController: EditDisplayLogic {
	
	func displayTitle(viewModel: Edit.GetTitle.ViewModel) {
		
		if let title = viewModel.disPlayTitle.title {
			self.title = "Edit"
			self.titleInput.text = title
		} else {
			self.title = "Add"
		}
		
	}
	
}
